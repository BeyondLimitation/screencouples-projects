left = from(bucket: "networks")
  |> range(start: -5s)
  |> filter(fn: (r) => r["_measurement"] == "ifTable")
  |> filter(fn: (r) => r["_field"] == "ifAdminStatus" or r["_field"] == "ifIndex")
  |> duplicate(column: "ifAdminStatus_name", as:"AdminStatus")
  |> drop(columns: ["_measurement", "_field", "_value", "_time", "_start", "_stop", "agent_host", "ifAdminStatus", "ifAdminStatus_name", "source"])
  |> limit(n:1)

right = from(bucket: "networks")
  |> range(start: -5s)
  |> filter(fn: (r) => r["_measurement"] == "ifXTable")
  |> filter(fn: (r) => r["_field"] == "ifAlias")
  |> duplicate(column: "_value", as:"Interface")
  |> drop(columns: ["_measurement", "_field", "_value", "_time", "_start", "_stop", "agent_host", "ifAdminStatus", "ifAdminStatus_name", "source"])
  |> limit(n:1)

join(tables: {t1: left, t2: right}, on: ["index"])
|> drop(columns: ["index"])
|> unique(column: "Interface")
|> yield()
---------------------------------------------------------------------------------------------------------------

from(bucket: "networks")
  |> range(start: -2s)
  |> filter(fn: (r) => r["_measurement"] == "snmp")
  |> filter(fn: (r) => r["_field"] == "uptime")
  |> map(fn: (r) => ({r with _value: r._value/ 100 +2}))
  |> limit(n:1)
  |> drop(columns: ["_field", "_measurement", "_start", "_stop", "_time", "agent_host"])
  |> yield()
